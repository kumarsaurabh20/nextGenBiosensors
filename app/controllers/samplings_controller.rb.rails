class SamplingsController < ApplicationController
  respond_to :html,:json
  
  protect_from_forgery :except => [:post_data]
  
  # Don't forget to edit routes if you're using RESTful routing
  # 
  #resources :samplings,:only => [:index] do
  #   collection do
  #     post "post_data"
  #   end
  # end

  def post_data
    message=""
    sampling_params = { :id => params[:id],:code => params[:code],:volume => params[:volume],:sampling_site_id => params[:sampling_site_id],:samplingDate => params[:samplingDate],:note => params[:note],:air_temperature => params[:air_temperature],:moisture => params[:moisture],:pressure => params[:pressure],:windSpeed => params[:windSpeed],:windDirection => params[:windDirection],:waterFlow => params[:waterFlow],:lightIntensity => params[:lightIntensity],:rainfallEvents => params[:rainfallEvents],:depth => params[:depth],:turbidity => params[:turbidity],:salinity => params[:salinity],:tidalRange => params[:tidalRange],:operators => params[:operators],:water_temperature => params[:water_temperature],:conductivity => params[:conductivity],:phosphates => params[:phosphates],:nitrates => params[:nitrates],:ph => params[:ph],:nitrogen => params[:nitrogen],:bod5 => params[:bod5],:cod => params[:cod],:h2osat => params[:h2osat],:sampling_equipments_id => params[:sampling_equipments_id],:storage => params[:storage] }
    case params[:oper]
    when 'add'
      if params["id"] == "_empty"
        sampling = Sampling.create(sampling_params)
        message << ('add ok') if sampling.errors.empty?
      end
      
    when 'edit'
      sampling = Sampling.find(params[:id])
      message << ('update ok') if sampling.update_attributes(sampling_params)
    when 'del'
      Sampling.destroy_all(:id => params[:id].split(","))
      message <<  ('del ok')
    when 'sort'
      samplings = Sampling.all
      samplings.each do |sampling|
        sampling.position = params['ids'].index(sampling.id.to_s) + 1 if params['ids'].index(sampling.id.to_s) 
        sampling.save
      end
      message << "sort ak"
    else
      message <<  ('unknown action')
    end
    
    unless (sampling && sampling.errors).blank?  
      sampling.errors.entries.each do |error|
        message << "<strong>#{Sampling.human_attribute_name(error[0])}</strong> : #{error[1]}<br/>"
      end
      render :json =>[false,message]
    else
      render :json => [true,message] 
    end
  end
  
  
  def index
    index_columns ||= [:id,:code,:volume,:sampling_site_id,:samplingDate,:note,:air_temperature,:moisture,:pressure,:windSpeed,:windDirection,:waterFlow,:lightIntensity,:rainfallEvents,:depth,:turbidity,:salinity,:tidalRange,:operators,:water_temperature,:conductivity,:phosphates,:nitrates,:ph,:nitrogen,:bod5,:cod,:h2osat,:sampling_equipments_id,:storage]
    current_page = params[:page] ? params[:page].to_i : 1
    rows_per_page = params[:rows] ? params[:rows].to_i : 10

    conditions={:page => current_page, :per_page => rows_per_page}
    conditions[:order] = params["sidx"] + " " + params["sord"] unless (params[:sidx].blank? || params[:sord].blank?)
    
    if params[:_search] == "true"
      conditions[:conditions]=filter_by_conditions(index_columns)
    end
    
    @samplings=Sampling.paginate(conditions)
    total_entries=@samplings.total_entries
    
    respond_with(@samplings) do |format|
      format.json { render :json => @samplings.to_jqgrid_json(index_columns, current_page, rows_per_page, total_entries)}  
    end
  end

end